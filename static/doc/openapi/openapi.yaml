openapi: 3.0.3
info:
  title: Group car api
  version: 0.2.1
  
tags:
- name: Authentication
  description: Requests for authentication
- name: User
  description: Requests for everything user related

# Paths
paths:
  /api/status:
    get:
      summary: Test path
      description: A test path to check if the server is reachable
      responses:
        200:
          description: The standard response. The server is reachable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
  /api/user:
    get:
      summary: Get all users
      description: Get a list of all users
      responses:
        200:
          description: The list of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
  
  # Authentication
  /auth:
    head:
      summary: Get the csrf token
      tags:
      - Authentication
      responses:
        200:
          description: The csrf token is in the header XSRF-TOKEN
  /auth/login:
    put:
      summary: Log in
      description: Logs the user in with the given username and the given password
      tags:
      - Authentication
      parameters:
      - name: XSRF-TOKEN
        in: header
        required: false
        schema:
          type: string
      requestBody:
        description: Login data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginObject'
      responses:
        200:
          description: The login was successful
        400:
          description: The login request is malformed, or the given credentials are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        401:
          description: Csrf token doesn't exist on the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /auth/sign-up:
    put:
      summary: Sign up
      description: Signs the user up with the given attributes
      tags:
      - Authentication
      parameters:
      - name: XSRF-TOKEN
        in: header
        required: false
        schema:
          type: string
      requestBody:
        description: The sign up properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpObject'
      responses:
        201:
          description: The user was successfully signed up
        400:
          description: The request is malformed, the request is missing parameters or parameters are invalid, or a user with the given username already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        401:
          description: Csrf token doesn't exist on the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /auth/logout:
    put:
      summary: Log the client out
      tags:
      - Authentication
      description: Log the client out by replacing the jwt cookie with a pre-login one
      parameters:
      - name: XSRF-TOKEN
        in: header
        required: false
        schema:
          type: string 
      responses:
        204:
          description: The client is logged out
        401:
          description: The action can't be performed due to authorization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
  /auth/token:
    put:
      summary: Check if logged in
      tags:
      - Authentication
      description: Check if the current state of the client indicates that it is logged in. Checks the jwt token and the payload within.
      parameters:
      - name: XSRF-TOKEN
        in: header
        required: false
        schema:
          type: string 
      responses:
        200:
          description: The client is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: The client is not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
                
  # User
  /user/generate-profile-pic:
    get:
      summary: Create new pseudo-random profile picture
      tags:
      - User
      description: Generates a new pseudo-random profile picture with the given username as seed. An offset can be
        send with the username to generate a different profile picture for the same username. The same username and offset will
        always produce the same profile picture.
      parameters: 
      - name: username
        in: query
        required: true
        schema:
          type: string
      - name: offset
        in: query
        required: false
        schema:
          type: number
      responses:
        200:
          description: The generation was successfull and the picture is returned.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        400:
          description: The request is missing parameters and/or is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
  /api/user/{userId}/profile-pic:
    get:
      summary: Get the profile picture
      tags:
      - User
      description: Get the profile picture of the user with the given id
      parameters: 
      - name: userId
        in: path
        required: true
        schema:
          type: number
      responses:
        200:
          description: The profile picture as jpeg
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        404:
          description: No user with the given id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
# Components
components:
  schemas:
    # Status
    StatusObject:
      type: object
      properties:
        server:
          $ref: '#/components/schemas/StatusType'
        database:
          $ref: '#/components/schemas/StatusType'
    StatusType:
      type: string
      enum:
      - 'up'
      - 'down'
    # User
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        isBetaUser:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserList:
      type: array
      items:
        $ref: '#/components/schemas/User'
    # Authentication
    LoginObject:
      type: object
      properties:
        username:
          type: string
        password: 
          type: string
      example:
        username: demo
        password: 123456
    SignUpObject:
      type: object
      properties:
        email: 
          type: string
        username:
          type: string
        password:
          type: string
      example:
        email: demo@mai.com
        username: demo
        password: 123456
    # Error
    RestError:
      type: object
      required: 
      - status
      - statusCode
      - timestamp
      - message
      properties:
        status:
          type: string
        statusCode:
          type: number
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        detail:
          type: object
    UnauthorizedError:
      allOf:
      - $ref: '#/components/schemas/RestError'
      - example:
          status: Unauthorized
          statusCode: 401
          message: You're not authorized to view the requested resourced.
          detail: {}
          timestamp: '2020-05-03T13:21:35.938Z'

# External docs
externalDocs:
  description: Code documentation is here
  url: /doc/typedoc