openapi: 3.0.3
info:
  title: Group car api
  version: 0.2.1
  
tags:
- name: Authentication
  description: Requests for authentication
- name: User
  description: Requests for everything user related
- name: Group
  description: Requests for everything groups related

# Paths
paths:
  /api/status:
    get:
      summary: Test path
      description: A test path to check if the server is reachable
      responses:
        200:
          description: The standard response. The server is reachable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusObject'
  
  # Authentication
  /auth:
    head:
      summary: Get the csrf token
      tags:
      - Authentication
      responses:
        200:
          description: The csrf token is in the header XSRF-TOKEN
  /auth/login:
    put:
      summary: Log in
      description: Logs the user in with the given username and the given password
      tags:
      - Authentication
      parameters:
      - $ref: '#/components/parameters/XsrfParameter'
      requestBody:
        description: Login data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginObject'
      responses:
        200:
          description: The login was successful
        400:
          description: The login request is malformed, or the given credentials are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        401:
          description: Csrf token doesn't exist on the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorSchema'
  /auth/sign-up:
    post:
      summary: Sign up
      description: Signs the user up with the given attributes
      tags:
      - Authentication
      parameters:
      - $ref: '#/components/parameters/XsrfParameter'
      requestBody:
        description: The sign up properties
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpObject'
      responses:
        201:
          description: The user was successfully signed up
        400:
          description: The request is malformed, the request is missing parameters or parameters are invalid, or a user with the given username already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        401:
          description: Csrf token doesn't exist on the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorSchema'
  /auth/logout:
    put:
      summary: Log the client out
      tags:
      - Authentication
      description: Log the client out by replacing the jwt cookie with a pre-login one
      parameters:
      - $ref: '#/components/parameters/XsrfParameter'
      responses:
        204:
          description: The client is logged out
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /auth/token:
    put:
      summary: Check if logged in
      tags:
      - Authentication
      description: Check if the current state of the client indicates that it is logged in. Checks the jwt token and the payload within.
      parameters:
      - $ref: '#/components/parameters/XsrfParameter'
      responses:
        200:
          description: The client is logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
                
  # User
  /user/generate-profile-pic:
    get:
      summary: Create new pseudo-random profile picture
      tags:
      - User
      description: Generates a new pseudo-random profile picture with the given username as seed. An offset can be
        send with the username to generate a different profile picture for the same username. The same username and offset will
        always produce the same profile picture.
      parameters: 
      - name: username
        in: query
        required: true
        schema:
          type: string
      - name: offset
        in: query
        required: false
        schema:
          type: number
      responses:
        200:
          description: The generation was successfull and the picture is returned.
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
  /api/user/{userId}/profile-pic:
    parameters: 
      - name: userId
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get the profile picture
      tags:
      - User
      description: Get the profile picture of the user with the given id
      responses:
        200:
          description: The profile picture as jpeg
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        404:
          $ref: '#/components/responses/UserNotFoundErrorResponse'
  /api/user/invite:
    get:
      summary: Get invites of logged in user
      tags:
        - User
      description: Gets all invites of the currently logged in user
      responses:
        200:
          description: All invites of the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  invites:
                    type: array
                    items:
                      $ref: '#/components/schemas/InviteWithGroupInvitedByData'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
  /api/user/invite/{groupId}/join:
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: integer
      - $ref: '#/components/parameters/XsrfParameter'
    post:
      summary: Joins the group
      tags:
        - User
      description: Joins the group with the given id by accepting an invite for it
      responses:
        204:
          description: The invite was accepted and the user is a new member of the group.
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          description: "Either the invite itself doesn't exist or the group which the user tries to join doesn't"
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/GroupNotFoundErrorSchema'
                - $ref: '#/components/schemas/InviteNotFoundSchema'
  
  # Group
  /api/group:
    post:
      summary: Creates a new group
      tags:
      - Group
      description: Create a new group with the currently logged in user as admin and owner.
      parameters:
      - $ref: '#/components/parameters/XsrfParameter'
      requestBody:
        description: The initial group data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        201:
          description: The group was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupData'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /api/group/{groupId}:
    parameters: 
    - $ref: '#/components/parameters/XsrfParameter'
    - $ref: '#/components/parameters/GroupId'
    get:
      summary: Get group data
      tags:
      - Group
      description: Get the data of a group if the user is a member of that group
      responses:
        200:
          description: The data could be successfully retrieved. If the user is a member of the group this response will contain all group data and a list of members. If the user is not a member of the group the response will only contain the id and the name.
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/GroupWithMembers'
                - $ref: '#/components/schemas/GroupSimple'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          description: The group doesn't exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupNotFoundErrorSchema'
    put:
      summary: Updates a group
      tags:
      - Group
      description: Updated the group with the given data. The user can only update a group if the user is an admin of that group.
      requestBody:
        description: The data with which the group should be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      responses:
        200:
          description: The updated group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupData'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/GroupNotFoundErrorResponse'
    delete:
      summary: Deletes a group
      tags:
      - Group
      description: Delete the group which has the given id if the user which requests the action is the owner of that group
      responses:
        204:
          description: Successfully deleted the group
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/GroupNotFoundErrorResponse'
  /api/group/{groupId}/invite:
    post:
      summary: Invites a user to the group
      tags:
      - Group
      description: Invites a user to the group
      parameters: 
      - $ref: '#/components/parameters/XsrfParameter'
      - $ref: '#/components/parameters/GroupId'
      requestBody:
        description: Information about who to invite
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
      responses:
        201:
          description: 'The user was successully invited'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        401:
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        404:
          $ref: '#/components/responses/UserNotFoundErrorResponse'
  /api/group/{groupId}/leave:
    parameters:
      - $ref: '#/components/parameters/XsrfParameter'
    post:
      summary: Leaves the specified group
      tags:
        - Group
      parameters: 
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
      description: Removes the currently logged in user from the specified group.
      responses:
        204:
          description: The user left the group successfully.
        400:
          $ref: '#/components/responses/BadRequestErrorResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'
  /api/group/{groupId}/{userId}/admin/grant:
    parameters:
      - $ref: '#/components/parameters/XsrfParameter'
    put:
      summary: Grants a user admin permissions
      description: Grants the specified user admin permissions.
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: The user was granted admin permissions
        400:
          description: Either the request is missing parameter, the user is not a member of the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorSchema'
        401:
          description: Current user is either not logged in, not a member of the group or not an admin of the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorSchema'
  /api/group/{groupId}/{userId}/admin/revoke:
    parameters:
      - $ref: '#/components/parameters/XsrfParameter'
    put:
      summary: Grants a user admin permissions
      description: Grants the specified user admin permissions.
      tags:
        - Group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Admin permission for the user has been successfully revoked.
        400:
          description: Either the request is missing parameter, the user is not a member of the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestErrorSchema'
        401:
          description: Current user is either not logged in, not a member of the group or not an admin of the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedErrorSchema'
    
# Components
components:

  # Schemas
  schemas:
    # Status
    StatusObject:
      type: object
      properties:
        server:
          $ref: '#/components/schemas/StatusType'
        database:
          $ref: '#/components/schemas/StatusType'
    StatusType:
      type: string
      enum:
      - 'up'
      - 'down'
      
    # User
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        isBetaUser:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserSimple:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          
    # Group
    GroupRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example: 
        name: Family group
        description: Our new group for the family
    CreateGroupRequest:
      allOf:
      - type: object # Override required of GroupData
        required:
        - name
        properties:
          name:
            type: string
      - $ref: '#/components/schemas/GroupRequest'
    GroupData:
      type: object
      required:
      - id
      - name
      - createdAt
      - updatedAt
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        owner:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    GroupMember:
      type: object
      required: 
      - userId
      - isAdmin
      properties:
        User:
          $ref: '#/components/schemas/UserSimple'
        isAdmin:
          type: boolean
    GroupWithMembers:
      allOf:
        - $ref: '#/components/schemas/GroupData'
        - type: object
          required:
          - members
          properties:
            members:
              type: array
              items:
                $ref: '#/components/schemas/GroupMember'
    GroupSimple:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
        name:
          type: string
        ownerId:
          type: integer
        description:
          type: string
    GroupSimpleWithOwner:
      allOf:
      - $ref: '#/components/schemas/GroupSimple'
      - type: object
        properties:
          Owner:
            $ref: '#/components/schemas/UserSimple'
    
    # Invite
    Invite:
      type: object
      properties:
        userId:
          type: integer
        groupId:
          type: integer
        createdAt:
          type: string
          format: date-time
        invitedBy:
          type: integer
    InviteWithGroupInvitedByData:
      type: object
      properties:
        userId:
          type: integer
        Group:
          $ref: '#/components/schemas/GroupSimpleWithOwner'
        InviteSender:
          $ref: '#/components/schemas/UserSimple'
        createdAt:
          type: string
          format: date-time
          
    # Authentication
    LoginObject:
      type: object
      properties:
        username:
          type: string
        password: 
          type: string
      example:
        username: demo
        password: '123456'
    SignUpObject:
      type: object
      properties:
        email: 
          type: string
        username:
          type: string
        password:
          type: string
      example:
        email: demo@mai.com
        username: demo
        password: '123456'
        
    # Error
    RestError:
      type: object
      required: 
      - status
      - statusCode
      - timestamp
      - message
      properties:
        status:
          type: string
        statusCode:
          type: number
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        detail:
          type: object
    UnauthorizedErrorSchema:
      allOf:
      - $ref: '#/components/schemas/RestError'
      - example:
          status: Unauthorized
          statusCode: 401
          message: You're not authorized to view the requested resourced.
          detail: {}
          timestamp: '2020-05-03T13:21:35.938Z'
    BadRequestErrorSchema:
      allOf:
      - $ref: '#/components/schemas/RestError'
      - example:
          status: Bad Request
          statusCode: 400
          message: The sent request is missing required attributes.
          detail: {}
          timestamp: '2020-05-03T13:21:35.938Z'
    InternalServerErrorSchema:
      allOf:
      - $ref: '#/components/schemas/RestError'
      - example:
          status: Internal Server Error
          statusCode: 500
          message: An unexpected error occurred.
          detail: {}
          timestamp: '2020-05-03T13:21:35.938Z'
    EntityNotFoundErrorSchema:
      allOf:
      - $ref: '#/components/schemas/RestError'
      - example:
          status: Entity Not Found Error
          statusCode: 404
          message: Entity not found
          detail: {}
          timestamp: '2020-05-03T13:21:35.938Z'
    UserNotFoundErrorSchema:
      allOf:
      - $ref: '#/components/schemas/EntityNotFoundErrorSchema'
      - example:
          status: A user with id 4 doesn't exist
          detail:
            userId: 4
    GroupNotFoundErrorSchema:
      allOf:
      - $ref: '#/components/schemas/EntityNotFoundErrorSchema'
      - example:
          status: A group with id 4 doesn't exist
          detail: 
            groupId: 4
    InviteNotFoundSchema:
      allOf:
      - $ref: '#/components/schemas/EntityNotFoundErrorSchema'
      - example:
          status: An invite for the group doesn't exist
          detail: 
            groupId: 4
            userId: 2
  # Responses
  responses:
    # Error
    BadRequestErrorResponse:
      description: The sent request is malformed or missing required attributes.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestErrorSchema'
    UnauthorizedErrorResponse:
      description: The user who sent the request in not authorized for the requested action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedErrorSchema'
    InternalServerErrorResponse:
      description: The server encountered an unexpected error while handling the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerErrorSchema'
    UserNotFoundErrorResponse:
      description: A user with the given userId doesn't exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserNotFoundErrorSchema'
    GroupNotFoundErrorResponse:
      description: A group with the given groupId doesn't exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GroupNotFoundErrorSchema'
            
  # Parameter
  parameters:
    XsrfParameter:
      name: XSRF-TOKEN
      in: header
      required: false
      schema:
        type: string
    GroupId:
      name: groupId
      in: path
      schema:
        type: integer
      required: true
# External docs
externalDocs:
  description: Code documentation is here
  url: /doc/typedoc