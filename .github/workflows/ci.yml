name: CI Pipeline

on:
  push:
    branches:
      - '*'
    tags:
      - 'v[0-9].[0-9]+.[0-9]+'
      - 'v[0-9].[0-9]+.[0-9]+-alpha.[0-9]+'
      - 'v[0-9].[0-9]+.[0-9]+-beta.[0-9]+'
  pull_request:
  release:
    types:
      - created

env:
  SERVER_IP: 206.189.63.151
  POSTGRES_DB: groupcartest
  POSTGRES_PASSWORD: groupcarapitest
  POSTGRES_USERNAME: groupcarapitest

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Linting
        run: yarn eslint
  audit:
    name: Audit libraries
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Auditing
        run: yarn audit
  
  build:
    name: Test building
    needs: [lint, audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Building
        run: yarn tsc

  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Testing
        run: yarn test:unit
  integration-test:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: groupcartest
          POSTGRES_PASSWORD: groupcarapitest
          POSTGRES_USER: groupcarapitest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Testing
        run: yarn test:integration
  
  deploy-dev:
    name: Deploy a development version
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    if: ${{github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-alpha.')}}
    env:
      SERVER_PATH: '/var/www/dev.my-group-car.de/server'
      SERVER_ENV_FILE_PATH: '/etc/dev.my-group-car.de/dev.my-group-car.de.conf'
      SSH_KEY: ${{secrets.SSH_KEY_DEV}}
      SSH_KNOWN_HOST: ${{secrets.SSH_KNOWN_HOST_DEV}}
      SERVER_USER: 'deploy-dev'
      SERVER_NAME: 'group-car-dev'
      PASSWORD: ${{secrets.GITHUB_TOKEN}}
      COMPOSE_CONFIG: dev.yml
      PORT: 8082
      FRONTEND_PATH: /home/deploy-dev/dev.my-group-car.de/html
      ACCESS_PATH: /etc/dev.my-group-car.de/access_token.txt
      SENTRY_DSN: ${{secrets.SENTRY_DSN_DEV}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: groupcartest
          POSTGRES_PASSWORD: groupcarapitest
          POSTGRES_USER: groupcarapitest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Generate documentation
        run: yarn typedoc
      - name: Build
        run: yarn tsc
      - name: Configure ssh
        run: bash scripts/configure_ssh.sh
      - name: Deploy
        run: bash scripts/deploy.sh
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT_DEV}}
        with:
          environment: production
          version: ${{github.ref}}
          sourcemaps: './build'
  deploy-beta:
    name: Deploy a beta version
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    if: ${{github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && contains(github.ref, '-beta.')}}
    env:
      SERVER_PATH: '/var/www/beta.my-group-car.de/server'
      SERVER_ENV_FILE_PATH: '/etc/beta.my-group-car.de/beta.my-group-car.de.conf'
      SSH_KEY: ${{secrets.SSH_KEY_BETA}}
      SSH_KNOWN_HOST: ${{secrets.SSH_KNOWN_HOST_BETA}}
      SERVER_USER: 'deploy-beta'
      SERVER_SERVICE_USER: 'group-car-beta'
      SERVER_NAME: 'group-car-beta'
      PASSWORD: ${{secrets.GITHUB_TOKEN}}
      COMPOSE_CONFIG: beta.yml
      PORT: 8081
      FRONTEND_PATH: /home/deploy-beta/beta.my-group-car.de/html
      ACCESS_PATH: /etc/beta.my-group-car.de/access_token.txt
      SENTRY_DSN: ${{secrets.SENTRY_DSN_BETA}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: groupcartest
          POSTGRES_PASSWORD: groupcarapitest
          POSTGRES_USER: groupcarapitest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Generate documentation
        run: yarn typedoc
      - name: Build
        run: yarn tsc
      - name: Configure ssh
        run: bash scripts/configure_ssh.sh
      - name: Deploy
        run: bash scripts/deploy.sh
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT_BETA}}
        with:
          environment: production
          version: ${{github.ref}}
          sourcemaps: './build'
  deploy-release:
    name: Deploy a release version
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    if: ${{github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(github.ref, '-beta.') && !contains(github.ref, '-dev.') && !contains(github.ref, '-')}}
    env:
      SERVER_PATH: '/var/www/my-group-car.de/server'
      SERVER_ENV_FILE_PATH: '/etc/my-group-car.de/my-group-car.de.conf'
      SSH_KEY: ${{secrets.SSH_KEY}}
      SSH_KNOWN_HOST: ${{secrets.SSH_KNOWN_HOST}}
      SERVER_USER: 'deploy'
      SERVER_SERVICE_USER: 'group-car'
      SERVER_NAME: 'group-car'
      PASSWORD: ${{secrets.GITHUB_TOKEN}}
      COMPOSE_CONFIG: prod.yml
      PORT: 8080
      FRONTEND_PATH: /home/deploy/my-group-car.de/html
      ACCESS_PATH: /etc/my-group-car.de/access_token.txt
      SENTRY_DSN: ${{secrets.SENTRY_DSN}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: groupcartest
          POSTGRES_PASSWORD: groupcarapitest
          POSTGRES_USER: groupcarapitest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - run: yarn install
      - name: Generate documentation
        run: yarn typedoc
      - name: Build
        run: yarn tsc
      - name: Configure ssh
        run: bash scripts/configure_ssh.sh
      - name: Deploy
        run: bash scripts/deploy.sh
      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT}}
        with:
          environment: production
          version: ${{github.ref}}
          sourcemaps: './build'
